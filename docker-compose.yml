version: '3.8'

services:
  # Backend API Service with Pre-loaded Models
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: anomaly-backend
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - SERVICE_TYPE=api
      - GROQ_API_KEY=${GROQ_API_KEY}
      - MONGODB_URL=${MONGODB_URL:-mongodb://mongo:27017}
      - DATABASE_NAME=${DATABASE_NAME:-anomaly_detection}
      - TRANSFORMERS_CACHE=/app/model_cache
      - TORCH_HOME=/app/model_cache
      - HF_HOME=/app/model_cache
    volumes:
      - ./backend:/app
      - ./backend/anomaly_frames:/app/anomaly_frames
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - model_cache:/app/model_cache  # Persistent model cache
    depends_on:
      - mongo
    networks:
      - anomaly-network
    restart: unless-stopped

  # Dashboard Service (same image, different service type)
  dashboard:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: anomaly-dashboard
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app
      - SERVICE_TYPE=dashboard
      - GROQ_API_KEY=${GROQ_API_KEY}
      - MONGODB_URL=${MONGODB_URL:-mongodb://mongo:27017}
      - DATABASE_NAME=${DATABASE_NAME:-anomaly_detection}
      - TRANSFORMERS_CACHE=/app/model_cache
      - TORCH_HOME=/app/model_cache
      - HF_HOME=/app/model_cache
    volumes:
      - ./backend:/app
      - ./backend/anomaly_frames:/app/anomaly_frames
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - model_cache:/app/model_cache  # Shared model cache
    depends_on:
      - backend
      - mongo
    networks:
      - anomaly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Increased for model loading

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: anomaly-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_DASHBOARD_URL=http://localhost:8001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - anomaly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: anomaly-mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password123}
      - MONGO_INITDB_DATABASE=${DATABASE_NAME:-anomaly_detection}
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - anomaly-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: anomaly-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - dashboard
      - frontend
    networks:
      - anomaly-network
    restart: unless-stopped

volumes:
  mongo_data:
    driver: local
  model_cache:
    driver: local

networks:
  anomaly-network:
    driver: bridge
